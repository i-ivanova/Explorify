{"ast":null,"code":"// returns a new date shifted a certain number of days (can be negative)\nexport function shiftDate(date,numDays){var newDate=new Date(date);newDate.setDate(newDate.getDate()+numDays);return newDate;}export function getBeginningTimeForDate(date){return new Date(date.getFullYear(),date.getMonth(),date.getDate());}// obj can be a parseable string, a millisecond timestamp, or a Date object\nexport function convertToDate(obj){return obj instanceof Date?obj:new Date(obj);}export function dateNDaysAgo(numDaysAgo){return shiftDate(new Date(),-numDaysAgo);}export function getRange(count){var arr=[];for(var idx=0;idx<count;idx+=1){arr.push(idx);}return arr;}","map":{"version":3,"sources":["/home/iivanova/Desktop/UBC_2021_2022/CPSC547_information_visualization/project/explorify/src/calendar-heatmap/helpers.js"],"names":["shiftDate","date","numDays","newDate","Date","setDate","getDate","getBeginningTimeForDate","getFullYear","getMonth","convertToDate","obj","dateNDaysAgo","numDaysAgo","getRange","count","arr","idx","push"],"mappings":"AAAA;AACA,MAAO,SAASA,CAAAA,SAAT,CAAmBC,IAAnB,CAAyBC,OAAzB,CAAkC,CACvC,GAAMC,CAAAA,OAAO,CAAG,GAAIC,CAAAA,IAAJ,CAASH,IAAT,CAAhB,CACAE,OAAO,CAACE,OAAR,CAAgBF,OAAO,CAACG,OAAR,GAAoBJ,OAApC,EACA,MAAOC,CAAAA,OAAP,CACD,CAED,MAAO,SAASI,CAAAA,uBAAT,CAAiCN,IAAjC,CAAuC,CAC5C,MAAO,IAAIG,CAAAA,IAAJ,CAASH,IAAI,CAACO,WAAL,EAAT,CAA6BP,IAAI,CAACQ,QAAL,EAA7B,CAA8CR,IAAI,CAACK,OAAL,EAA9C,CAAP,CACD,CAED;AACA,MAAO,SAASI,CAAAA,aAAT,CAAuBC,GAAvB,CAA4B,CACjC,MAAOA,CAAAA,GAAG,WAAYP,CAAAA,IAAf,CAAsBO,GAAtB,CAA4B,GAAIP,CAAAA,IAAJ,CAASO,GAAT,CAAnC,CACD,CAED,MAAO,SAASC,CAAAA,YAAT,CAAsBC,UAAtB,CAAkC,CACvC,MAAOb,CAAAA,SAAS,CAAC,GAAII,CAAAA,IAAJ,EAAD,CAAa,CAACS,UAAd,CAAhB,CACD,CAED,MAAO,SAASC,CAAAA,QAAT,CAAkBC,KAAlB,CAAyB,CAC9B,GAAMC,CAAAA,GAAG,CAAG,EAAZ,CACA,IAAK,GAAIC,CAAAA,GAAG,CAAG,CAAf,CAAkBA,GAAG,CAAGF,KAAxB,CAA+BE,GAAG,EAAI,CAAtC,CAAyC,CACvCD,GAAG,CAACE,IAAJ,CAASD,GAAT,EACD,CACD,MAAOD,CAAAA,GAAP,CACD","sourcesContent":["// returns a new date shifted a certain number of days (can be negative)\nexport function shiftDate(date, numDays) {\n  const newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + numDays);\n  return newDate;\n}\n\nexport function getBeginningTimeForDate(date) {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n\n// obj can be a parseable string, a millisecond timestamp, or a Date object\nexport function convertToDate(obj) {\n  return obj instanceof Date ? obj : new Date(obj);\n}\n\nexport function dateNDaysAgo(numDaysAgo) {\n  return shiftDate(new Date(), -numDaysAgo);\n}\n\nexport function getRange(count) {\n  const arr = [];\n  for (let idx = 0; idx < count; idx += 1) {\n    arr.push(idx);\n  }\n  return arr;\n}\n"]},"metadata":{},"sourceType":"module"}