{"ast":null,"code":"// returns a new date shifted a certain number of days (can be negative)\nexport function shiftDate(date, numDays) {\n  const newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + numDays);\n  return newDate;\n}\nexport function getBeginningTimeForDate(date) {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n} // obj can be a parseable string, a millisecond timestamp, or a Date object\n\nexport function convertToDate(obj) {\n  return obj instanceof Date ? obj : new Date(obj);\n}\nexport function dateNDaysAgo(numDaysAgo) {\n  return shiftDate(new Date(), -numDaysAgo);\n}\nexport function getRange(count) {\n  const arr = [];\n\n  for (let idx = 0; idx < count; idx += 1) {\n    arr.push(idx);\n  }\n\n  return arr;\n}","map":{"version":3,"sources":["/home/iivanova/Desktop/UBC_2021_2022/CPSC547_information_visualization/project/explorify/src/calendar-heatmap/helpers.js"],"names":["shiftDate","date","numDays","newDate","Date","setDate","getDate","getBeginningTimeForDate","getFullYear","getMonth","convertToDate","obj","dateNDaysAgo","numDaysAgo","getRange","count","arr","idx","push"],"mappings":"AAAA;AACA,OAAO,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,OAAzB,EAAkC;AACvC,QAAMC,OAAO,GAAG,IAAIC,IAAJ,CAASH,IAAT,CAAhB;AACAE,EAAAA,OAAO,CAACE,OAAR,CAAgBF,OAAO,CAACG,OAAR,KAAoBJ,OAApC;AACA,SAAOC,OAAP;AACD;AAED,OAAO,SAASI,uBAAT,CAAiCN,IAAjC,EAAuC;AAC5C,SAAO,IAAIG,IAAJ,CAASH,IAAI,CAACO,WAAL,EAAT,EAA6BP,IAAI,CAACQ,QAAL,EAA7B,EAA8CR,IAAI,CAACK,OAAL,EAA9C,CAAP;AACD,C,CAED;;AACA,OAAO,SAASI,aAAT,CAAuBC,GAAvB,EAA4B;AACjC,SAAOA,GAAG,YAAYP,IAAf,GAAsBO,GAAtB,GAA4B,IAAIP,IAAJ,CAASO,GAAT,CAAnC;AACD;AAED,OAAO,SAASC,YAAT,CAAsBC,UAAtB,EAAkC;AACvC,SAAOb,SAAS,CAAC,IAAII,IAAJ,EAAD,EAAa,CAACS,UAAd,CAAhB;AACD;AAED,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAC9B,QAAMC,GAAG,GAAG,EAAZ;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,KAAxB,EAA+BE,GAAG,IAAI,CAAtC,EAAyC;AACvCD,IAAAA,GAAG,CAACE,IAAJ,CAASD,GAAT;AACD;;AACD,SAAOD,GAAP;AACD","sourcesContent":["// returns a new date shifted a certain number of days (can be negative)\nexport function shiftDate(date, numDays) {\n  const newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + numDays);\n  return newDate;\n}\n\nexport function getBeginningTimeForDate(date) {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n\n// obj can be a parseable string, a millisecond timestamp, or a Date object\nexport function convertToDate(obj) {\n  return obj instanceof Date ? obj : new Date(obj);\n}\n\nexport function dateNDaysAgo(numDaysAgo) {\n  return shiftDate(new Date(), -numDaysAgo);\n}\n\nexport function getRange(count) {\n  const arr = [];\n  for (let idx = 0; idx < count; idx += 1) {\n    arr.push(idx);\n  }\n  return arr;\n}\n"]},"metadata":{},"sourceType":"module"}